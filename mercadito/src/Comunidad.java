
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;


/**
 *
 * 
 */
public class Comunidad extends javax.swing.JFrame {

    /**
     * Creates new form Comunidad.
     * Se llena la lista con con los comentarios almacenados
     * del mas reciente al mas antiguo
     */
    DefaultListModel comentarios = new DefaultListModel();
    public Comunidad() {
        initComponents();
        areaComentarios.setModel(comentarios);
        ListaDE tLista = Mercadito.listaComentarios;
        for (int i = tLista.contarNodos() - 1; i >= 0; i--) {
            Comentario cActual = ((Comentario) tLista.get(i).getiVal());
            comentarios.addElement("*"+cActual.getNomUser());
            comentarios.addElement(cActual.getComentario());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        textoComentario = new javax.swing.JTextField();
        bComentar = new javax.swing.JButton();
        bAumentar = new javax.swing.JButton();
        bDisminuir = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        areaComentarios = new javax.swing.JList<>();
        bCasa = new javax.swing.JButton();

        jButton3.setText("jButton3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Rockwell", 0, 36)); // NOI18N
        jLabel1.setText("Comunidad Mercadito");

        bComentar.setFont(new java.awt.Font("Rockwell", 0, 14)); // NOI18N
        bComentar.setText("Comentar");
        bComentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bComentarActionPerformed(evt);
            }
        });

        bAumentar.setFont(new java.awt.Font("Rockwell", 1, 24)); // NOI18N
        bAumentar.setText("+");
        bAumentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAumentarActionPerformed(evt);
            }
        });

        bDisminuir.setFont(new java.awt.Font("Rockwell", 1, 24)); // NOI18N
        bDisminuir.setText("-");
        bDisminuir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDisminuirActionPerformed(evt);
            }
        });

        areaComentarios.setFont(new java.awt.Font("Rockwell", 0, 14)); // NOI18N
        areaComentarios.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(areaComentarios);

        bCasa.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N
        bCasa.setText("Casa");
        bCasa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCasaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(bCasa)
                .addContainerGap(51, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(bComentar)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textoComentario, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bAumentar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bDisminuir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(bCasa))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(textoComentario, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bAumentar, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bDisminuir, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(220, 220, 220)))
                .addComponent(bComentar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * En este metodo se crea un nuevo comentario en base al texto 
     * que ponga el usuario, se guarda en la lista de comentarios 
     * y se muestra en pantalla
     * @param evt 
     */
    private void bComentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bComentarActionPerformed
        if (textoComentario.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Ingresa un comentario");
        } else {
            areaComentarios.setModel(comentarios);
            Comentario cTemp = new Comentario(Mercadito.nombreUsuario, textoComentario.getText());
            Nodo<Comentario> nTemp = new Nodo(cTemp);
            Mercadito.listaComentarios.agregarNodo(nTemp);

            String mensaje = "*"+Mercadito.nombreUsuario;
            comentarios.addElement(mensaje);
            mensaje = textoComentario.getText();
            comentarios.addElement(mensaje);

            guardarComentarios();
        }
    }//GEN-LAST:event_bComentarActionPerformed
    /**
     * Este metodo es para volver a la ventana principal
     * @param evt 
     */
    private void bCasaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCasaActionPerformed
        dispose();
        VentanaPrincipal ventana = new VentanaPrincipal();
        ventana.setVisible(true);
    }//GEN-LAST:event_bCasaActionPerformed
    /**
     * Dependiendo del comentario que se seleccione 
     * se le aumentra su valor actual
     * @param evt 
     */
    private void bAumentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAumentarActionPerformed
        int index = areaComentarios.getSelectedIndex();
        String comSeleccionado = "" + comentarios.getElementAt(index);
        ListaDE tComent = Mercadito.listaComentarios;
        for (int i = 0; i < tComent.contarNodos(); i++) {
            Comentario cActual = ((Comentario) tComent.get(i).getiVal());
            if(cActual.getComentario().equals(comSeleccionado)){
                JOptionPane.showMessageDialog(null, "+1");
                if(cActual.getVeredicto() == 5){
                    break;
                }else{
                cActual.aumentarVeredicto();
                break;
                }
            }
        }
        guardarComentarios();
    }//GEN-LAST:event_bAumentarActionPerformed
    /**
     * Dependiendo del comentario que se seleccione
     * se le disminuira su valor actual
     * @param evt 
     */
    private void bDisminuirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDisminuirActionPerformed
        int index = areaComentarios.getSelectedIndex();
        String comSeleccionado = "" + comentarios.getElementAt(index);
        ListaDE tComent = Mercadito.listaComentarios;
        for (int i = 0; i < tComent.contarNodos(); i++) {
            Comentario cActual = ((Comentario) tComent.get(i).getiVal());
            if(cActual.getComentario().equals(comSeleccionado)){
                JOptionPane.showMessageDialog(null, "-1");
                if(cActual.getVeredicto() == 0){
                    break;
                }else{
                cActual.disminuirVeredicto();
                break;
                }
            }
        }
        guardarComentarios();
    }//GEN-LAST:event_bDisminuirActionPerformed
    /**
     * Este metodo es para guardar comentarios en un archivo
     * Se llama cada vez que se agrega un comentario
     */
    public void guardarComentarios() {
        try {
            FileOutputStream archivoSalida = new FileOutputStream(Mercadito.NOMBRELISTACOMENTARIOS);
            ObjectOutputStream salidaDeDato = new ObjectOutputStream(archivoSalida);
            salidaDeDato.writeObject(Mercadito.listaComentarios);
            salidaDeDato.close();
        } catch (IOException e) {

        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Comunidad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Comunidad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Comunidad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Comunidad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Comunidad().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> areaComentarios;
    private javax.swing.JButton bAumentar;
    private javax.swing.JButton bCasa;
    private javax.swing.JButton bComentar;
    private javax.swing.JButton bDisminuir;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField textoComentario;
    // End of variables declaration//GEN-END:variables
}
